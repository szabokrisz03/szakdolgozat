@implements IDisposable
@inherits LayoutComponentBase
@inject NavigationManager navmanager

<MudThemeProvider @ref="_themeProvider" IsDarkMode="@_isDarkPreferred" />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Feladat kezelő</PageTitle>

<MudLayout Class="full-height">
    <MudAppBar Elevation="0">
        <MudSpacer />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader class="box" onclick="@(() => GoToMain())">
            <MudText>Feladat kezelő</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="full-height">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-4 full-height">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudThemeProvider? _themeProvider;
    bool _isDarkPreferred = true;
    bool _drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        if (_themeProvider != null)
        {
            _isDarkPreferred = await _themeProvider.GetSystemPreference();
        }

        navmanager.LocationChanged += LocationChanged!;
    }

    void GoToMain()
    {
        navmanager.NavigateTo("");
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        // intentional
    }

    public void Dispose()
    {
        navmanager.LocationChanged -= LocationChanged!;
    }
}